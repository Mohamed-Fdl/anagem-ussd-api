/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RoyaltyService } from "../royalty.service";
import { RoyaltyCreateInput } from "./RoyaltyCreateInput";
import { Royalty } from "./Royalty";
import { RoyaltyFindManyArgs } from "./RoyaltyFindManyArgs";
import { RoyaltyWhereUniqueInput } from "./RoyaltyWhereUniqueInput";
import { RoyaltyUpdateInput } from "./RoyaltyUpdateInput";

export class RoyaltyControllerBase {
  constructor(protected readonly service: RoyaltyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Royalty })
  async createRoyalty(
    @common.Body() data: RoyaltyCreateInput
  ): Promise<Royalty> {
    return await this.service.createRoyalty({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        isPaid: true,
        market: true,
        merchant: true,
        npi: true,
        phoneNumber: true,
        store: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Royalty] })
  @ApiNestedQuery(RoyaltyFindManyArgs)
  async royalties(@common.Req() request: Request): Promise<Royalty[]> {
    const args = plainToClass(RoyaltyFindManyArgs, request.query);
    return this.service.royalties({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        isPaid: true,
        market: true,
        merchant: true,
        npi: true,
        phoneNumber: true,
        store: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Royalty })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async royalty(
    @common.Param() params: RoyaltyWhereUniqueInput
  ): Promise<Royalty | null> {
    const result = await this.service.royalty({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        isPaid: true,
        market: true,
        merchant: true,
        npi: true,
        phoneNumber: true,
        store: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Royalty })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRoyalty(
    @common.Param() params: RoyaltyWhereUniqueInput,
    @common.Body() data: RoyaltyUpdateInput
  ): Promise<Royalty | null> {
    try {
      return await this.service.updateRoyalty({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          id: true,
          isPaid: true,
          market: true,
          merchant: true,
          npi: true,
          phoneNumber: true,
          store: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Royalty })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRoyalty(
    @common.Param() params: RoyaltyWhereUniqueInput
  ): Promise<Royalty | null> {
    try {
      return await this.service.deleteRoyalty({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          id: true,
          isPaid: true,
          market: true,
          merchant: true,
          npi: true,
          phoneNumber: true,
          store: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
